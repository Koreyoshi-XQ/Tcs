import pygame
import sys
import random
from pygame.locals import*

# 游戏窗口大小
w = 600
h = 600
snake_speed = 8

# 蛇类
# 方块以20为单位
class Snake(object):
    # 初始化各种需要的属性 [开始时默认向右，身体初始长度6]
    def __init__(self):
        self.dirction = K_RIGHT
        self.body = []
        for x in range(6):
            self.addnode()
        
    # 在前端增加方块
    def addnode(self):
        left,top = (0,0)
        if self.body:
            left,top = (self.body[0].left,self.body[0].top)
        node = Rect(left,top,20,20)
        if self.dirction == K_LEFT:
            node.left -= 20
        elif self.dirction == K_RIGHT:
            node.left += 20
        elif self.dirction == K_UP:
            node.top -= 20
        elif self.dirction == K_DOWN:
            node.top += 20
        self.body.insert(0,node)

    
        
    # 删除最后一个块
    def delnode(self):
        self.body.pop()
        
    # 死亡判断
    def isdead(self):
        # 撞墙
        if self.body[0].x  not in range(w):
            return True
        if self.body[0].y  not in range(h):
            return True
        # 撞自己
        if self.body[0] in self.body[1:]:
            return True
        return False
        
    # 移动！
    def move(self):
        self.addnode()
        self.delnode()
        
    # 改变方向 但是左右、上下不能被逆向改变
    def changedirection(self,curkey):
        LR = [K_LEFT,K_RIGHT]
        UD = [K_UP,K_DOWN]
        if curkey in LR+UD:
            if (curkey in LR) and (self.dirction in LR):
                return
            if (curkey in UD) and (self.dirction in UD):
                return
            self.dirction = curkey
       
       
# 食物类
# 方法： 放置/移除
# 方块以20为单位
class Food:
    def __init__(self):
        self.rect = Rect(-20,0,20,20)
        
    def remove(self):
        self.rect.x=-20
    
    def set(self):
        if self.rect.x == -20:
            allpos = []
            # 不靠边界太近 20 ~ w-20 之间
            for pos in range(20,w-20,20):
                allpos.append(pos)
            self.rect.left = random.choice(allpos)
            self.rect.top  = random.choice(allpos)
            print(self.rect)
            
#各种属性
def show_text(screen, pos, text,color, font_bold = False, font_size = 60):   
    #获取系统字体，并设置文字大小  
    cur_font = pygame.font.Font("C:\Windows\Fonts\STLITI.TTF", font_size)  
    #设置是否加粗属性  
    cur_font.set_bold(font_bold)  
    #设置文字内容  
    text_fmt = cur_font.render(text, 1, color)  
    #绘制文字  
    screen.blit(text_fmt, pos)


    
#主函数      
def main():
    pygame.init() #模块初始化
    screen_size = (w,h)
    screen = pygame.display.set_mode(screen_size) 
    pygame.display.set_caption('TCS')   #标题
    snake_speed_clock = pygame.time.Clock()  #创建时钟对象
    scores = 0   #初始分数为0
    isdead = False  #初始snake活着
    
    # 蛇和食物
    snake = Snake()
    food = Food()
    
    while True:
            
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            if event.type == pygame.KEYDOWN:
                snake.changedirection(event.key)
                # 死后按space重新
                if event.key == pygame.K_SPACE and isdead:
                    return main()
            
        screen.fill((255,255,255))


    
        # 画贪吃蛇 
        if not isdead:
            snake.move()
        for rect in snake.body:
            pygame.draw.rect(screen,(255,220,39),rect,0)

            
        # 显示死亡提示
        isdead = snake.isdead()
        if isdead:
            show_text(screen,(60,200),'YOU ARE DEAD!',(255,0,0),False,70)
            show_text(screen,(200,300),'PLEASE 按下 SPACE 继续',(0, 128, 0),False,20)
            
        # 吃到食物+1分
        # 当食物rect与蛇头重合,吃掉，然后Snake增加一个Node
        if food.rect == snake.body[0]:
            scores+=1
            food.remove()
            snake.addnode()
        
        # 食物
        food.set()
        pygame.draw.rect(screen,(0,0,255),food.rect,0)
        
        # 显示分数文字
        show_text(screen,(270,0),'Scores: '+str(scores),(223,223,223),False,30)
        
        pygame.display.update()
        snake_speed_clock.tick(snake_speed)

   
    
if __name__ == '__main__':
    main()
